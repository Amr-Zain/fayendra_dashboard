/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as MainRouteRouteImport } from './routes/_main/route'
import { Route as MainIndexRouteImport } from './routes/_main/index'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as MainUsersIndexRouteImport } from './routes/_main/users/index'
import { Route as MainProfileIndexRouteImport } from './routes/_main/profile/index'
import { Route as MainPagesIndexRouteImport } from './routes/_main/pages/index'
import { Route as MainUsersAddRouteImport } from './routes/_main/users/add'
import { Route as MainPagesAddRouteImport } from './routes/_main/pages/add'
import { Route as MainSettingsCountriesIndexRouteImport } from './routes/_main/settings/countries/index'
import { Route as MainSettingsCitiesIndexRouteImport } from './routes/_main/settings/cities/index'
import { Route as MainUsersShowIdRouteImport } from './routes/_main/users/show/$id'
import { Route as MainUsersEditIdRouteImport } from './routes/_main/users/edit/$id'
import { Route as MainSettingsCountriesAddRouteImport } from './routes/_main/settings/countries/add'
import { Route as MainSettingsCitiesAddRouteImport } from './routes/_main/settings/cities/add'
import { Route as MainSettingsCountriesEditIdRouteImport } from './routes/_main/settings/countries/edit/$id'
import { Route as MainSettingsCitiesEditIdRouteImport } from './routes/_main/settings/cities/edit/$id'

const MainAnalyticsLazyRouteImport = createFileRoute('/_main/analytics')()

const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRouteRoute = MainRouteRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const MainIndexRoute = MainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainAnalyticsLazyRoute = MainAnalyticsLazyRouteImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => MainRouteRoute,
} as any).lazy(() =>
  import('./routes/_main/analytics.lazy').then((d) => d.Route),
)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const MainUsersIndexRoute = MainUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainProfileIndexRoute = MainProfileIndexRouteImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainPagesIndexRoute = MainPagesIndexRouteImport.update({
  id: '/pages/',
  path: '/pages/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainUsersAddRoute = MainUsersAddRouteImport.update({
  id: '/users/add',
  path: '/users/add',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainPagesAddRoute = MainPagesAddRouteImport.update({
  id: '/pages/add',
  path: '/pages/add',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainSettingsCountriesIndexRoute =
  MainSettingsCountriesIndexRouteImport.update({
    id: '/settings/countries/',
    path: '/settings/countries/',
    getParentRoute: () => MainRouteRoute,
  } as any)
const MainSettingsCitiesIndexRoute = MainSettingsCitiesIndexRouteImport.update({
  id: '/settings/cities/',
  path: '/settings/cities/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainUsersShowIdRoute = MainUsersShowIdRouteImport.update({
  id: '/users/show/$id',
  path: '/users/show/$id',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainUsersEditIdRoute = MainUsersEditIdRouteImport.update({
  id: '/users/edit/$id',
  path: '/users/edit/$id',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainSettingsCountriesAddRoute =
  MainSettingsCountriesAddRouteImport.update({
    id: '/settings/countries/add',
    path: '/settings/countries/add',
    getParentRoute: () => MainRouteRoute,
  } as any)
const MainSettingsCitiesAddRoute = MainSettingsCitiesAddRouteImport.update({
  id: '/settings/cities/add',
  path: '/settings/cities/add',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainSettingsCountriesEditIdRoute =
  MainSettingsCountriesEditIdRouteImport.update({
    id: '/settings/countries/edit/$id',
    path: '/settings/countries/edit/$id',
    getParentRoute: () => MainRouteRoute,
  } as any)
const MainSettingsCitiesEditIdRoute =
  MainSettingsCitiesEditIdRouteImport.update({
    id: '/settings/cities/edit/$id',
    path: '/settings/cities/edit/$id',
    getParentRoute: () => MainRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/analytics': typeof MainAnalyticsLazyRoute
  '/': typeof MainIndexRoute
  '/pages/add': typeof MainPagesAddRoute
  '/users/add': typeof MainUsersAddRoute
  '/pages': typeof MainPagesIndexRoute
  '/profile': typeof MainProfileIndexRoute
  '/users': typeof MainUsersIndexRoute
  '/settings/cities/add': typeof MainSettingsCitiesAddRoute
  '/settings/countries/add': typeof MainSettingsCountriesAddRoute
  '/users/edit/$id': typeof MainUsersEditIdRoute
  '/users/show/$id': typeof MainUsersShowIdRoute
  '/settings/cities': typeof MainSettingsCitiesIndexRoute
  '/settings/countries': typeof MainSettingsCountriesIndexRoute
  '/settings/cities/edit/$id': typeof MainSettingsCitiesEditIdRoute
  '/settings/countries/edit/$id': typeof MainSettingsCountriesEditIdRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/analytics': typeof MainAnalyticsLazyRoute
  '/': typeof MainIndexRoute
  '/pages/add': typeof MainPagesAddRoute
  '/users/add': typeof MainUsersAddRoute
  '/pages': typeof MainPagesIndexRoute
  '/profile': typeof MainProfileIndexRoute
  '/users': typeof MainUsersIndexRoute
  '/settings/cities/add': typeof MainSettingsCitiesAddRoute
  '/settings/countries/add': typeof MainSettingsCountriesAddRoute
  '/users/edit/$id': typeof MainUsersEditIdRoute
  '/users/show/$id': typeof MainUsersShowIdRoute
  '/settings/cities': typeof MainSettingsCitiesIndexRoute
  '/settings/countries': typeof MainSettingsCountriesIndexRoute
  '/settings/cities/edit/$id': typeof MainSettingsCitiesEditIdRoute
  '/settings/countries/edit/$id': typeof MainSettingsCountriesEditIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_main': typeof MainRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/_main/analytics': typeof MainAnalyticsLazyRoute
  '/_main/': typeof MainIndexRoute
  '/_main/pages/add': typeof MainPagesAddRoute
  '/_main/users/add': typeof MainUsersAddRoute
  '/_main/pages/': typeof MainPagesIndexRoute
  '/_main/profile/': typeof MainProfileIndexRoute
  '/_main/users/': typeof MainUsersIndexRoute
  '/_main/settings/cities/add': typeof MainSettingsCitiesAddRoute
  '/_main/settings/countries/add': typeof MainSettingsCountriesAddRoute
  '/_main/users/edit/$id': typeof MainUsersEditIdRoute
  '/_main/users/show/$id': typeof MainUsersShowIdRoute
  '/_main/settings/cities/': typeof MainSettingsCitiesIndexRoute
  '/_main/settings/countries/': typeof MainSettingsCountriesIndexRoute
  '/_main/settings/cities/edit/$id': typeof MainSettingsCitiesEditIdRoute
  '/_main/settings/countries/edit/$id': typeof MainSettingsCountriesEditIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/auth/login'
    | '/analytics'
    | '/'
    | '/pages/add'
    | '/users/add'
    | '/pages'
    | '/profile'
    | '/users'
    | '/settings/cities/add'
    | '/settings/countries/add'
    | '/users/edit/$id'
    | '/users/show/$id'
    | '/settings/cities'
    | '/settings/countries'
    | '/settings/cities/edit/$id'
    | '/settings/countries/edit/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/auth/login'
    | '/analytics'
    | '/'
    | '/pages/add'
    | '/users/add'
    | '/pages'
    | '/profile'
    | '/users'
    | '/settings/cities/add'
    | '/settings/countries/add'
    | '/users/edit/$id'
    | '/users/show/$id'
    | '/settings/cities'
    | '/settings/countries'
    | '/settings/cities/edit/$id'
    | '/settings/countries/edit/$id'
  id:
    | '__root__'
    | '/_main'
    | '/auth'
    | '/auth/login'
    | '/_main/analytics'
    | '/_main/'
    | '/_main/pages/add'
    | '/_main/users/add'
    | '/_main/pages/'
    | '/_main/profile/'
    | '/_main/users/'
    | '/_main/settings/cities/add'
    | '/_main/settings/countries/add'
    | '/_main/users/edit/$id'
    | '/_main/users/show/$id'
    | '/_main/settings/cities/'
    | '/_main/settings/countries/'
    | '/_main/settings/cities/edit/$id'
    | '/_main/settings/countries/edit/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MainRouteRoute: typeof MainRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/analytics': {
      id: '/_main/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof MainAnalyticsLazyRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_main/users/': {
      id: '/_main/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof MainUsersIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/profile/': {
      id: '/_main/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof MainProfileIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/pages/': {
      id: '/_main/pages/'
      path: '/pages'
      fullPath: '/pages'
      preLoaderRoute: typeof MainPagesIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/users/add': {
      id: '/_main/users/add'
      path: '/users/add'
      fullPath: '/users/add'
      preLoaderRoute: typeof MainUsersAddRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/pages/add': {
      id: '/_main/pages/add'
      path: '/pages/add'
      fullPath: '/pages/add'
      preLoaderRoute: typeof MainPagesAddRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/settings/countries/': {
      id: '/_main/settings/countries/'
      path: '/settings/countries'
      fullPath: '/settings/countries'
      preLoaderRoute: typeof MainSettingsCountriesIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/settings/cities/': {
      id: '/_main/settings/cities/'
      path: '/settings/cities'
      fullPath: '/settings/cities'
      preLoaderRoute: typeof MainSettingsCitiesIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/users/show/$id': {
      id: '/_main/users/show/$id'
      path: '/users/show/$id'
      fullPath: '/users/show/$id'
      preLoaderRoute: typeof MainUsersShowIdRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/users/edit/$id': {
      id: '/_main/users/edit/$id'
      path: '/users/edit/$id'
      fullPath: '/users/edit/$id'
      preLoaderRoute: typeof MainUsersEditIdRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/settings/countries/add': {
      id: '/_main/settings/countries/add'
      path: '/settings/countries/add'
      fullPath: '/settings/countries/add'
      preLoaderRoute: typeof MainSettingsCountriesAddRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/settings/cities/add': {
      id: '/_main/settings/cities/add'
      path: '/settings/cities/add'
      fullPath: '/settings/cities/add'
      preLoaderRoute: typeof MainSettingsCitiesAddRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/settings/countries/edit/$id': {
      id: '/_main/settings/countries/edit/$id'
      path: '/settings/countries/edit/$id'
      fullPath: '/settings/countries/edit/$id'
      preLoaderRoute: typeof MainSettingsCountriesEditIdRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/settings/cities/edit/$id': {
      id: '/_main/settings/cities/edit/$id'
      path: '/settings/cities/edit/$id'
      fullPath: '/settings/cities/edit/$id'
      preLoaderRoute: typeof MainSettingsCitiesEditIdRouteImport
      parentRoute: typeof MainRouteRoute
    }
  }
}

interface MainRouteRouteChildren {
  MainAnalyticsLazyRoute: typeof MainAnalyticsLazyRoute
  MainIndexRoute: typeof MainIndexRoute
  MainPagesAddRoute: typeof MainPagesAddRoute
  MainUsersAddRoute: typeof MainUsersAddRoute
  MainPagesIndexRoute: typeof MainPagesIndexRoute
  MainProfileIndexRoute: typeof MainProfileIndexRoute
  MainUsersIndexRoute: typeof MainUsersIndexRoute
  MainSettingsCitiesAddRoute: typeof MainSettingsCitiesAddRoute
  MainSettingsCountriesAddRoute: typeof MainSettingsCountriesAddRoute
  MainUsersEditIdRoute: typeof MainUsersEditIdRoute
  MainUsersShowIdRoute: typeof MainUsersShowIdRoute
  MainSettingsCitiesIndexRoute: typeof MainSettingsCitiesIndexRoute
  MainSettingsCountriesIndexRoute: typeof MainSettingsCountriesIndexRoute
  MainSettingsCitiesEditIdRoute: typeof MainSettingsCitiesEditIdRoute
  MainSettingsCountriesEditIdRoute: typeof MainSettingsCountriesEditIdRoute
}

const MainRouteRouteChildren: MainRouteRouteChildren = {
  MainAnalyticsLazyRoute: MainAnalyticsLazyRoute,
  MainIndexRoute: MainIndexRoute,
  MainPagesAddRoute: MainPagesAddRoute,
  MainUsersAddRoute: MainUsersAddRoute,
  MainPagesIndexRoute: MainPagesIndexRoute,
  MainProfileIndexRoute: MainProfileIndexRoute,
  MainUsersIndexRoute: MainUsersIndexRoute,
  MainSettingsCitiesAddRoute: MainSettingsCitiesAddRoute,
  MainSettingsCountriesAddRoute: MainSettingsCountriesAddRoute,
  MainUsersEditIdRoute: MainUsersEditIdRoute,
  MainUsersShowIdRoute: MainUsersShowIdRoute,
  MainSettingsCitiesIndexRoute: MainSettingsCitiesIndexRoute,
  MainSettingsCountriesIndexRoute: MainSettingsCountriesIndexRoute,
  MainSettingsCitiesEditIdRoute: MainSettingsCitiesEditIdRoute,
  MainSettingsCountriesEditIdRoute: MainSettingsCountriesEditIdRoute,
}

const MainRouteRouteWithChildren = MainRouteRoute._addFileChildren(
  MainRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  MainRouteRoute: MainRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
